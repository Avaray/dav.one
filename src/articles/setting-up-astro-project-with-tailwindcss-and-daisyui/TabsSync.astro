<script>
  // Type definition for radio change event
  type RadioChangeEvent = Event & {
    target: HTMLInputElement;
  };

  // Use 'let' instead of 'const' for better compatibility with Astro's HMR
  let syncRadioInputs = (): void => {
    const radioButtons: NodeListOf<HTMLInputElement> = document.querySelectorAll(
      'input[type="radio"][aria-label]:not([disabled])',
    );

    const handleRadioChange = (event: RadioChangeEvent): void => {
      const { target } = event;
      const selectedAriaLabel: string | null = target.getAttribute('aria-label');

      // Guard clause for invalid aria-label
      if (!selectedAriaLabel) return;

      // Use more efficient selector to find matching radio buttons
      const matchingRadios: NodeListOf<HTMLInputElement> = document.querySelectorAll(
        `input[type="radio"][aria-label="${selectedAriaLabel}"]:not([disabled])`,
      );

      matchingRadios.forEach((radio: HTMLInputElement): void => {
        radio.checked = true;
      });
    };

    // Use event delegation for better performance
    document.addEventListener('change', (event: Event): void => {
      if (event.target instanceof HTMLInputElement && event.target.matches('input[type="radio"][aria-label]')) {
        handleRadioChange(event as RadioChangeEvent);
      }
    });
  };

  // Initialize the synchronization when the DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    syncRadioInputs();
  });

  // Handle Astro's view transitions if enabled
  document.addEventListener('astro:page-load', () => {
    syncRadioInputs();
  });

  // Cleanup on page unload
  document.addEventListener('astro:before-swap', () => {
    // Add any cleanup code here if needed
  });
</script>
