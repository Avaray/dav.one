<!-- <aside class='fixed top-4 right-4 z-10 flex flex-col w-auto'>
  <div class="bg-base-100">
  <ul id='themeList' tabindex='0' class='menu dropdown-content p-4 rounded-box gap-3'>
    {
      customThemesList.map((theme) => {
        return (
          <li>
            <div id='themeButton' class='justify-between gap-4 b-3 border-primary' data-theme={theme} data-value={theme}>
              <p class='capitalize'>{theme.replace(/_/g, ' ')}</p>
              <div class='flex gap-1'>
                <div class='size-24px bg-primary border-rd-10' />
              </div>
            </div>
          </li>
        );
      })
    }
  </ul>
</div>
</aside> -->
<script>
  const customThemesList = ['dark', 'light', 'forest', 'synthwave', 'aqua', 'night', 'dracula', 'coffee'];

  function loadTheme() {
    const url = new URL(window.location.href);
    const theme = url.searchParams.get('theme');
    theme && setTheme(theme);
  }

  document.addEventListener('DOMContentLoaded', loadTheme);

  // Function to set theme and save it to localStorage
  function setTheme(theme?: string) {
    const htmlElement = document.documentElement;
    // This will set the theme to a random one if no theme is provided
    theme ??= customThemesList[Math.floor(Math.random() * customThemesList.length)];
    htmlElement.setAttribute('data-theme', theme);
    try {
      localStorage.setItem('theme', theme);
    } catch (error) {}
  }

  // Change themes with buttons
  // const themeButtons = document.querySelectorAll('#themeButton');
  // themeButtons.forEach((button) => {
  //   button.addEventListener('click', () => {
  //     const theme: string | null = button.getAttribute('data-value');
  //     theme ? setTheme(theme) : setTheme('');
  //   });
  // });

  // Update URL with theme if parameter is present
  // I don't want to use theme param in URL by default
  function updateURLWithTheme(theme: string) {
    const url = new URL(window.location.href);
    if (url.searchParams.has('theme')) {
      url.searchParams.set('theme', theme);
      window.history.replaceState({}, '', url.href);
    }
  }

  // Change themes with CTRL + Arrow keys
  document.addEventListener('keydown', (event) => {
    if (event.ctrlKey) {
      const currentTheme = document.documentElement.getAttribute('data-theme') || '';
      const currentIndex = customThemesList.indexOf(currentTheme);
      if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {
        const previousTheme = customThemesList[currentIndex - 1] ?? customThemesList[customThemesList.length - 1];
        setTheme(previousTheme);
        updateURLWithTheme(previousTheme);
      } else if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {
        const nextTheme = customThemesList[currentIndex + 1] ?? customThemesList[0];
        setTheme(nextTheme);
        updateURLWithTheme(nextTheme);
      }
    }
  });
</script>
