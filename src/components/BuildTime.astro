---
import Icon from '@xtreat/astro-iconify';

const buildTimeISO = new Date().toUTCString();

const getLatestFailureDate = async () => {
  const repo = 'Avaray/dav.one';
  let page = 1;
  const perPage = 100;

  while (true) {
    const queryParams = `?branch=main&status=failure&per_page=${perPage}&page=${page}`;
    const response = await fetch(
      `https://api.github.com/repos/${repo}/actions/workflows/deploy.yml/runs${queryParams}`,
    );

    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }

    const data = await response.json();

    // If no workflow runs on this page, we've reached the end
    if (!data.workflow_runs || data.workflow_runs.length === 0) {
      return null; // No failure found
    }

    // Look for the first failure on this page
    const failureRun = data.workflow_runs.find((run: any) => run.conclusion === 'failure');

    if (failureRun) {
      return new Date(failureRun.updated_at).toUTCString();
    }

    // If we got fewer results than per_page, we've reached the last page
    if (data.workflow_runs.length < perPage) {
      return null; // No failure found
    }

    page++;
  }
};

const isProduction = import.meta.env.PRODUCTION_BUILD;

const latestFailureDate = isProduction ? await getLatestFailureDate() : null;
---

<div class='flex flex-col border-1 rounded-2xl min-w-[20vw] p-4 select-none'>
  <div class='flex items-center justify-between text-base-content mb-8'>
    <div class='flex items-center gap-2 xs:text-xl md:text-3xl text-xl font-bold'>
      <Icon icon='simple-icons:githubactions' class='inline-block w-14 h-14 m-2' />
      <span class='mr-5'>Builds</span>
    </div>
    <a
      href='https://github.com/Avaray/dav.one/actions'
      class='hover:text-primary'
      target='_blank'
      title='Open history of builds'
    >
      <Icon icon='octicon:link-external-16' class='inline-block w-8 h-8 m-2' />
    </a>
  </div>

  <div id='times' class='flex flex-col sm:flex-row lg:flex-col flex-1 gap-4'>
    <div class='flex items-center gap-2 mr-5'>
      <Icon icon='streamline:smiley-happy-solid' class='inline-block w-8 h-8 m-2 text-success' />
      <div class='flex flex-col'>
        <span class='font-bold'>Latest successful build:</span>
        <div id='build-hours'>{buildTimeISO}</div>
      </div>
    </div>
    {
      latestFailureDate && (
        <div class='flex items-center gap-2 mr-5'>
          <Icon icon='streamline:smiley-crying-1-solid' class='inline-block w-8 h-8 m-2 text-error' />
          <div class='flex flex-col'>
            <span class='font-bold'>Latest failed build:</span>
            <span>{latestFailureDate}</span>
          </div>
        </div>
      )
    }
  </div>
</div>
