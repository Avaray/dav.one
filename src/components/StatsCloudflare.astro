---
import Icon from '@xtreat/astro-iconify';
import { calculateAverageNumber, calculatePercentageOf } from '../scripts/utils.ts';

export const isDrop = (previous: number[], current: number) => {
  const previousAverage = calculateAverageNumber(previous);
  return calculatePercentageOf(current, previousAverage, true) < 90;
};

const CLOUDFLARE_GRAPHQL_URL = 'https://api.cloudflare.com/client/v4/graphql';
const ZONE_ID = import.meta.env.CF_ZONE_ID;
const API_TOKEN = import.meta.env.CF_RADAR_TOKEN;

const fetchCloudflareStats = async () => {
  const currentDate = new Date();
  const thirtyDaysAgo = new Date();
  // Using 31 days because I don't want current day
  thirtyDaysAgo.setDate(currentDate.getDate() - 31);

  // const formattedCurrentDate = currentDate.toISOString().split('T')[0];
  const formattedThirtyDaysAgo = thirtyDaysAgo.toISOString().split('T')[0];

  const headers = {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${API_TOKEN}`,
  };

  // https://pages.johnspurlock.com/graphql-schema-docs/cloudflare.html#AccountHttpRequests1dGroupsSum
  const dailyResponse = await fetch(CLOUDFLARE_GRAPHQL_URL, {
    method: 'POST',
    headers: headers,
    body: JSON.stringify({
      query: `
          query GetDailyStats($zoneId: String!, $since: ISO8601DateTime!) {
            viewer {
              zones(filter: { zoneTag: $zoneId }) {
                httpRequests1dGroups(
                  filter: { date_gt: $since },
                  limit: 30,
                  orderBy: [date_ASC]
                ) {
                  dimensions { date }
                  uniq { uniques }
                  sum { pageViews requests }
                }
              }
            }
          }
        `,
      variables: {
        zoneId: ZONE_ID,
        since: formattedThirtyDaysAgo,
      },
    }),
  });

  if (!dailyResponse.ok) {
    throw new Error(`HTTP error! Daily: ${dailyResponse.status}`);
  }

  const data = await dailyResponse.json();

  try {
    return data.data.viewer.zones[0].httpRequests1dGroups.map((day: any) => {
      return {
        date: day.dimensions.date,
        pageViews: day.sum.pageViews,
        requests: day.sum.requests,
        uniques: day.uniq.uniques,
      };
    });
  } catch (error) {
    console.log(`Can't fetch Cloudflare stats: ${error}`);
  }
};

const data30Days = await fetchCloudflareStats();

const highestVisitorsCount = data30Days.reduce((maxObj: any, currentObj: any) => {
  return currentObj.uniques > maxObj.uniques ? currentObj : maxObj;
});

const getHighestNumber = (data: any, key: string) => {
  return data.reduce((maxObj: any, currentObj: any) => {
    return currentObj[key] > maxObj[key] ? currentObj : maxObj;
  });
};
---

<div class='border-1 rounded-2xl w-full p-4 select-none my-8'>
  <div class='flex items-center gap-2 xs:text-xl md:text-3xl text-xl text-base-content font-bold mb-8'>
    <Icon icon='icon-park-outline:analysis' class='inline-block w-14 h-14 m-2' />
    Cloudflare Analytics
  </div>
  <!-- Charts will be hidden on mobile and small screens in the future. 
   First I need to figure out how to get deduplicated data from Cloudflare. 
   Currently they are not providing any way for that. 
   I think the only way is to base on requests that are done in dashboard. -->
  <div id='chart-container' class='w-full h-24 flex gap-1 mb-1 mt-4 items-end'>
    {
      data30Days.map((day: any, index: number) => {
        // Get the previous three days, ensuring we do not go out of bounds
        const previousDays = data30Days.slice(Math.max(index - 3, 0), index);

        return (
          <div
            class={`flex flex-1 gap-1 hover:bg-base-content sm:rounded-tl-2xl sm:rounded-tr-2xl ${
              isDrop(
                previousDays.map((d: any) => d.uniques),
                day.uniques,
              )
                ? 'bg-error'
                : 'bg-success'
            }`}
            style={`height: ${calculatePercentageOf(day.uniques, highestVisitorsCount.uniques, true)}%`}
            title={`${day.date}\n\n${day.pageViews} page views\n${day.uniques} unique visitors`}
          />
        );
      })
    }
  </div>
</div>
